Description:  Udagram App - script for servers
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  S3Resource:
    Description: S3 resource name for the application code
    Type: String

  AmiImageId:
    Description: AMI Image ID
    Type: String
    Default: ami-0d1cd67c26f5fca19
  
  DefaultCidrIp:
    Description: Default CIDR notation
    Type: String
  
  ConnectionPort:
    Description: Connection port for LB and Web server Ingress connection 
    Type: Number

Resources:
  UdacityS3ReadOnlyEC2:
      Type: AWS::IAM::Role
      Properties:
          RoleName: 
              !Sub ${EnvironmentName}-Role
          AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
              -   Effect: Allow
                  Principal:
                      Service:
                      - ec2.amazonaws.com
                  Action:
                  - sts:AssumeRole
          Path: "/"

  RolePolicies:
      Type: AWS::IAM::Policy
      Properties:
          PolicyName: AmazonS3ReadOnlyAccess
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - 
                  Effect: Allow
                  Action: 
                  -   s3:Get*
                  -   s3:List*
                  Resource: 
                  -   !Ref S3Resource
                  -   !Join [ "", [!Ref S3Resource, "/*" ]]
          Roles:
          -   Ref: UdacityS3ReadOnlyEC2
  
  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
        Path: "/"
        Roles:
        - Ref: UdacityS3ReadOnlyEC2
  LBSecGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ConnectionPort
          ToPort: !Ref ConnectionPort
          CidrIp: !Ref DefaultCidrIp
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref ConnectionPort
          ToPort: !Ref ConnectionPort
          CidrIp: !Ref DefaultCidrIp
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to our hosts
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ConnectionPort
          ToPort: !Ref ConnectionPort
          CidrIp: !Ref DefaultCidrIp 
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref DefaultCidrIp

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udagramappbucket/index.zip .
          unzip -o index.zip
      ImageId: !Ref AmiImageId
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
        - Ref: WebAppTargetGroup
  
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: !Ref ConnectionPort
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      -   Type: forward
          TargetGroupArn: 
              Ref: WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: !Ref ConnectionPort
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      -   Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      -   Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  LoadBalancerURL:
    Description: The public url to load balancer
    Value: !Join [ "", ["http://" , !GetAtt WebAppLB.DNSName ]]
